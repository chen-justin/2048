{"version":3,"sources":["index.js"],"names":["Tile","props","tags","value","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","toString","Board","i","this","tiles","renderTile","React","Component","Game","_this","Object","_home_jc_Dropbox_Projects_2048_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_jc_Dropbox_Projects_2048_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_jc_Dropbox_Projects_2048_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleKeyPress","e","window","event","keyCode","shift","state","history","Array","fill","score","best_score","stepNumber","arr","length","rand","Math","floor","random","indexOf","bit","move_possible","slice","moveMade","prev","ptr","setState","pivot","emptySpaces","push","max","concat","numRows","numPerRow","row_index","j","curr_index","above_curr","below_curr","console","log","_this2","current","document","onkeydown","onKeyPress","clasName","onClick","class","ReactDOM","render","getElementById"],"mappings":"mOAIA,SAASA,EAAKC,GACZ,IAAIC,EACJ,OAAID,EAAME,MAAQ,EAEdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZ,OAKPL,EAAO,aAAcD,EAAME,MAAMK,WAG/BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,GACbD,EAAME,YAKPM,qLACOC,GACT,OACEN,EAAAC,EAAAC,cAACN,EAAD,CACEG,MAAOQ,KAAKV,MAAMW,MAAMF,sCAM5B,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZI,KAAKE,WAAW,GAChBF,KAAKE,WAAW,GAChBF,KAAKE,WAAW,GAChBF,KAAKE,WAAW,IAEnBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZI,KAAKE,WAAW,GAChBF,KAAKE,WAAW,GAChBF,KAAKE,WAAW,GAChBF,KAAKE,WAAW,IAEnBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZI,KAAKE,WAAW,GAChBF,KAAKE,WAAW,GAChBF,KAAKE,WAAW,IAChBF,KAAKE,WAAW,KAEnBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZI,KAAKE,WAAW,IAChBF,KAAKE,WAAW,IAChBF,KAAKE,WAAW,IAChBF,KAAKE,WAAW,aAlCPC,IAAMC,WA0CpBC,cACJ,SAAAA,EAAYf,GAAO,IAAAgB,EAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMV,KA0BRsB,eAAiB,SAACC,GAEE,MADlBA,EAAIA,GAAKC,OAAOC,OACVC,QAEJV,EAAKW,MAAM,GAEU,KAAdJ,EAAEG,QAETV,EAAKW,MAAM,GAEU,KAAdJ,EAAEG,QAETV,EAAKW,MAAM,GAEU,KAAdJ,EAAEG,SAETV,EAAKW,MAAM,IAzCbX,EAAKY,MAAQ,CACXC,QAAS,CACP,CACElB,MAAOmB,MAAM,IAAIC,MAAM,KAG3BC,MAAO,EACPC,WAAY,EACZC,WAAY,GAQd,IANA,IAAIC,EAAM,GAMHA,EAAIC,OAAS,GAAG,CACrB,IAAMC,EAAOC,KAAKC,MANT,EAMeD,KAAKE,SALjB,GAMTL,EAAIM,QAAQJ,IAAS,IACxBF,EAAIA,EAAIC,QAAUC,GArBH,OAuBjBrB,EAAKY,MAAMC,QAAQ,GAAGlB,MAAMwB,EAAI,IAAM,EACtCnB,EAAKY,MAAMC,QAAQ,GAAGlB,MAAMwB,EAAI,IAAM,EAxBrBnB,qEA+Cb0B,GACJ,GAAIhC,KAAKiC,cAAe,CAEtB,IAAMd,EAAUnB,KAAKkB,MAAMC,QAAQe,MAAM,EAAGlC,KAAKkB,MAAMM,WAAa,GAE9DvB,EADUkB,EAAQA,EAAQO,OAAS,GACnBzB,MAAMiC,QAGxBC,GAAW,EAEf,GAAY,IAARH,EAEF,IAAK,IAAIjC,EAAI,EAAGA,EANL,EAMeA,IAAK,CAI7B,IAFA,IAAIqC,EAPQ,EAODrC,EACPsC,EAAMD,EAAO,EACVC,EATK,GASEtC,EAAE,IACXE,EAAMoC,GAAO,GAAKpC,EAAMoC,KAASpC,EAAMmC,IACxCpC,KAAKsC,SAAS,CAAChB,MAAOtB,KAAKkB,MAAMI,MAAQrB,EAAMoC,KAC/CpC,EAAMmC,GAAoB,EAAZnC,EAAMmC,GACpBnC,EAAMoC,IAAQ,EACdD,EAAOC,EACPF,GAAW,GACFlC,EAAMoC,GAAO,IACtBD,EAAOC,GAETA,IAKF,IADA,IAAIE,EAvBQ,EAuBAxC,EACLwC,EAxBK,GAwBIxC,EAAE,IAAcE,EAAMsC,GAAS,GAC7CA,IAGF,IADAF,EAAME,EACCF,EA5BK,GA4BEtC,EAAE,IACVE,EAAMoC,GAAO,IACfpC,EAAMsC,GAAStC,EAAMoC,GACrBpC,EAAMoC,IAAQ,EACdE,IACAJ,GAAW,GAEbE,SAIC,GAAY,IAARL,EAET,IAAK,IAAIjC,EAAI,EAAGA,EAzCF,EAyCeA,IAAK,CAKhC,IAFA,IAAIqC,EAAOrC,EACPsC,EAAMD,EA7CE,EA8CLC,EAAMpC,EAAMyB,QACdzB,EAAMoC,GAAO,GAAKpC,EAAMoC,KAASpC,EAAMmC,IACxCpC,KAAKsC,SAAS,CAAChB,MAAOtB,KAAKkB,MAAMI,MAAQrB,EAAMoC,KAC/CpC,EAAMmC,GAAoB,EAAZnC,EAAMmC,GACpBnC,EAAMoC,IAAQ,EACdD,EAAOC,EACPF,GAAW,GAEPlC,EAAMoC,GAAO,IACfD,EAAOC,GAGXA,GA1DU,EA8DZ,IADA,IAAIE,EAAQxC,EACLwC,EAAQtC,EAAMyB,QAAUzB,EAAMsC,GAAS,GAC5CA,GA/DU,EAkEZ,IADAF,EAAME,EACCF,EAAMpC,EAAMyB,QACbzB,EAAMoC,GAAO,IACfpC,EAAMsC,GAAStC,EAAMoC,GACrBpC,EAAMoC,IAAQ,EACdE,GAtEQ,EAuERJ,GAAW,GAEbE,GAzEU,OA4ET,GAAY,IAARL,EAET,IAAK,IAAIjC,EAAI,EAAGA,EA9EF,EA8EeA,IAAK,CAKhC,IAFA,IAAIqC,EAAOnC,EAAMyB,OAAS3B,EAAI,EAC1BsC,EAAMD,EAlFE,EAmFLC,GAAO,GACTpC,EAAMoC,GAAO,GAAKpC,EAAMoC,KAASpC,EAAMmC,IACxCpC,KAAKsC,SAAS,CAAChB,MAAOtB,KAAKkB,MAAMI,MAAQrB,EAAMoC,KAC/CpC,EAAMmC,GAAoB,EAAZnC,EAAMmC,GACpBnC,EAAMoC,IAAQ,EACdD,EAAOC,EACPF,GAAW,GAEPlC,EAAMoC,GAAO,IACfD,EAAOC,GAGXA,GA/FU,EAmGZ,IADA,IAAIE,EAAQtC,EAAMyB,OAAS3B,EAAI,EACxBwC,GAAS,GAAKtC,EAAMsC,GAAS,GAClCA,GApGU,EAuGZ,IADAF,EAAME,EACCF,GAAO,GACRpC,EAAMoC,GAAO,IACfpC,EAAMsC,GAAStC,EAAMoC,GACrBpC,EAAMoC,IAAQ,EACdE,GA3GQ,EA4GRJ,GAAW,GAEbE,GA9GU,OAiHT,GAAY,IAARL,EAET,IAAK,IAAIjC,EAAI,EAAGA,EApHL,EAoHeA,IAAK,CAI7B,IAFA,IAAIqC,EArHQ,GAqHArC,EAAE,GAAW,EACrBsC,EAAMD,EAAO,EACVC,EAvHK,EAuHCtC,EAAU,GAClBE,EAAMoC,GAAO,GAAKpC,EAAMoC,KAASpC,EAAMmC,IACxCpC,KAAKsC,SAAS,CAAChB,MAAOtB,KAAKkB,MAAMI,MAAQrB,EAAMoC,KAC/CpC,EAAMmC,GAAoB,EAAZnC,EAAMmC,GACpBnC,EAAMoC,IAAQ,EACdD,EAAOC,EACPF,GAAW,GACFlC,EAAMoC,GAAO,IACtBD,EAAOC,GAETA,IAKF,IADA,IAAIE,EArIQ,GAqICxC,EAAE,GAAW,EACnBwC,GAtIK,EAsIIxC,GAAaE,EAAMsC,GAAS,GAC1CA,IAGF,IADAF,EAAME,EACCF,GA1IK,EA0IEtC,GACRE,EAAMoC,GAAO,IACfpC,EAAMsC,GAAStC,EAAMoC,GACrBpC,EAAMoC,IAAQ,EACdE,IACAJ,GAAW,GAEbE,IAMN,IADA,IAAIG,EAAc,GACTzC,EAAI,EAAGA,EAAIE,EAAMyB,OAAQ3B,IAC5BE,EAAMF,GAAK,GACbyC,EAAYC,KAAK1C,GAWrB,GAPKoC,GAAmC,IAAvBK,EAAYd,QAC3B1B,KAAKsC,SAAS,CACZf,WAAYK,KAAKc,IAAI1C,KAAKkB,MAAMI,MAAOtB,KAAKkB,MAAMK,YAClDD,MAAO,IAIPa,EAAU,CAEZ,GAAIK,EAEFvC,EAAMuC,EADKZ,KAAKC,MAAMD,KAAKE,SAASU,EAAYd,UACrB,EAG7B1B,KAAKsC,SAAS,CACZnB,QAASA,EAAQwB,OAAO,CACtB,CACE1C,MAAOA,KAGXuB,WAAYL,EAAQO,iDAMdzB,EAAO2C,EAASC,GAE5B,IADA,IAAIZ,GAAgB,EACXlC,EAAI,EAAGA,EAAI6C,EAAS7C,IAE3B,IADA,IAAM+C,EAAY/C,EAAE6C,EACXG,EAAI,EAAGA,EAAIF,EAAWE,IAAK,CAClC,IAAMC,EAAaF,EAAYC,EAMzBE,EAAaD,EAAaH,EAAY,EAAIG,EAAaH,EAAY,KACnEK,EAAaF,EAAaH,EAAY5C,EAAMyB,OAASsB,EAAaH,EAAY,KAIpFZ,EAAgBA,GAAgC,OAAfgB,GAAsC,OAAfC,GAAqC,QAH3EH,EAAI,EAAI,EAAIC,EAAa,EAAI,OAGqE,QAFjGD,EAAI,EAAIF,EAAYG,EAAa,EAAG,MAO3D,OADAG,QAAQC,IAAInB,GACLA,mCAGA,IAAAoB,EAAArD,KACHsB,EAAQtB,KAAKkB,MAAMI,MACnBC,EAAavB,KAAKkB,MAAMK,WAEtB+B,EADUtD,KAAKkB,MAAMC,QACHnB,KAAKkB,MAAMM,YAInC,OAFA+B,SAASC,UAAYxD,KAAKY,eAGxBnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAO6D,WAAYzD,KAAKY,gBACrCnB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,QACAH,EAAAC,EAAAC,cAAA,KAAG+D,SAAS,YAAZ,6BAEFjE,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACfH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,cAAS2B,KAEd7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,cAAS4B,KAEd9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,cAASK,KAAKkB,MAAMM,gBAI7B/B,EAAAC,EAAAC,cAACG,EAAD,CACEG,MAAOqD,EAAQrD,QAEjBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAU+D,QAAS,kBAAMN,EAAKpC,MAAM,KAAIxB,EAAAC,EAAAC,cAAA,KAAGiE,MAAM,uBACnEnE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAU+D,QAAS,kBAAMN,EAAKpC,MAAM,KAAIxB,EAAAC,EAAAC,cAAA,KAAGiE,MAAM,qBACnEnE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAU+D,QAAS,kBAAMN,EAAKpC,MAAM,KAAIxB,EAAAC,EAAAC,cAAA,KAAGiE,MAAM,uBACnEnE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAU+D,QAAS,kBAAMN,EAAKpC,MAAM,KAAIxB,EAAAC,EAAAC,cAAA,KAAGiE,MAAM,iCA3S1DzD,IAAMC,WAoTzByD,IAASC,OAAOrE,EAAAC,EAAAC,cAACU,EAAD,MAAUkD,SAASQ,eAAe","file":"static/js/main.8cc10e46.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Tile(props) {\n  let tags = \"tile\";\n  if (props.value < 0) { //For our purposes, negative values will be the \"empty\" value.\n    return(\n      <div className=\"tile\">\n        {null}\n      </div>\n    );\n  }\n\n  tags = \"tile tile-\"+ props.value.toString();\n\n  return (\n    <div className={tags}>\n      {props.value}\n    </div>\n  );\n}\n\nclass Board extends React.Component {\n  renderTile(i) {\n    return (\n      <Tile\n        value={this.props.tiles[i]}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"game-board\">\n        <div className=\"board-row\">\n          {this.renderTile(0)}\n          {this.renderTile(1)}\n          {this.renderTile(2)}\n          {this.renderTile(3)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderTile(4)}\n          {this.renderTile(5)}\n          {this.renderTile(6)}\n          {this.renderTile(7)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderTile(8)}\n          {this.renderTile(9)}\n          {this.renderTile(10)}\n          {this.renderTile(11)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderTile(12)}\n          {this.renderTile(13)}\n          {this.renderTile(14)}\n          {this.renderTile(15)}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          tiles: Array(16).fill(-1)\n        }\n      ],\n      score: 0,\n      best_score: 0,\n      stepNumber: 0,\n    }\n    let arr = []\n    let rows = 4;\n    let rowSize = 4;\n\n\n    //Initializes board with \"2\" in two random places.\n    while (arr.length < 2) {\n      const rand = Math.floor(Math.random()*rows*rowSize);\n      if(arr.indexOf(rand) > -1) continue;\n      arr[arr.length] = rand;\n    }\n    this.state.history[0].tiles[arr[0]] = 2;\n    this.state.history[0].tiles[arr[1]] = 2;\n  }\n\n  handleKeyPress = (e) => {\n    e = e || window.event;\n    if (e.keyCode === 38) {\n      // up arrow\n      this.shift(1);\n    }\n    else if (e.keyCode === 40) {\n      // down arrow\n      this.shift(2);\n    }\n    else if (e.keyCode === 37) {\n      // left arrow\n      this.shift(0);\n    }\n    else if (e.keyCode === 39) {\n      // right arrow\n      this.shift(3);\n    }\n  }\n\n  shift(bit) {\n    if (this.move_possible) {\n      // 0 = left, 1 = up, 2 = down, 3 = right\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const tiles = current.tiles.slice();\n      const rows = 4;\n      const rowSize = 4;\n      let moveMade = false;\n\n      if (bit === 0) {\n        //Shifting left\n        for (let i = 0; i < rows; i++) {\n          //Perform possible merges.\n          let prev = i*rowSize;\n          let ptr = prev + 1;\n          while (ptr < (i+1)*rowSize) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              this.setState({score: this.state.score + tiles[ptr]});\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else if (tiles[ptr] > 0) {\n              prev = ptr;\n            }\n            ptr++;\n          }\n\n          //Moves everything as left as possible\n          let pivot = i*rowSize;\n          while (pivot < (i+1)*rowSize && tiles[pivot] > 0) {\n            pivot++;\n          }\n          ptr = pivot; //Reset ptr\n          while (ptr < (i+1)*rowSize) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot++;\n              moveMade = true;\n            }\n            ptr++;\n          }\n        }\n\n      } else if (bit === 1) {\n        //Shifting up\n        for (let i = 0; i < rowSize; i++) {\n\n          //Perform possible merges\n          let prev = i;\n          let ptr = prev + rowSize;\n          while (ptr < tiles.length) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              this.setState({score: this.state.score + tiles[ptr]});\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else {\n              if (tiles[ptr] > 0) {\n                prev = ptr;\n              }\n            }\n            ptr += rowSize;\n          }\n\n          let pivot = i;\n          while (pivot < tiles.length && tiles[pivot] > 0) {\n            pivot += rowSize;\n          }\n          ptr = pivot;\n          while (ptr < tiles.length) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot += rowSize;\n              moveMade = true;\n            }\n            ptr += rowSize;\n          }\n        }\n      } else if (bit === 2) {\n        //Shifting down\n        for (let i = 0; i < rowSize; i++) {\n\n          //Perform possible merges\n          let prev = tiles.length - i - 1;\n          let ptr = prev - rowSize;\n          while (ptr >= 0) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              this.setState({score: this.state.score + tiles[ptr]});\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else {\n              if (tiles[ptr] > 0) {\n                prev = ptr;\n              }\n            }\n            ptr -= rowSize;\n          }\n\n          let pivot = tiles.length - i - 1;\n          while (pivot >= 0 && tiles[pivot] > 0) {\n            pivot -= rowSize;\n          }\n          ptr = pivot;\n          while (ptr >= 0) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot -= rowSize;\n              moveMade = true;\n            }\n            ptr -= rowSize;\n          }\n        }\n      } else if (bit === 3) {\n        //Shifting right\n        for (let i = 0; i < rows; i++) {\n          //Perform possible merges.\n          let prev = (i+1)*rowSize-1;\n          let ptr = prev - 1;\n          while (ptr > i*rowSize-1) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              this.setState({score: this.state.score + tiles[ptr]});\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else if (tiles[ptr] > 0) {\n              prev = ptr;\n            }\n            ptr--;\n          }\n\n          //Moves everything as right as possible\n          let pivot = (i+1)*rowSize-1;\n          while (pivot >= i*rowSize && tiles[pivot] > 0) {\n            pivot--;\n          }\n          ptr = pivot; //Reset ptr\n          while (ptr >= i*rowSize) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot--;\n              moveMade = true;\n            }\n            ptr--;\n          }\n        }\n      }\n\n      let emptySpaces = [];\n      for (let i = 0; i < tiles.length; i++) {\n        if (tiles[i] < 0) {\n          emptySpaces.push(i);\n        }\n      }\n\n      if (!moveMade && emptySpaces.length === 0) {\n        this.setState({\n          best_score: Math.max(this.state.score, this.state.best_score),\n          score: 0,\n        })\n      }\n\n      if (moveMade) {\n        //Generate a new tile to add in an empty space.\n        if (emptySpaces) {\n          let rand = Math.floor(Math.random()*emptySpaces.length);\n          tiles[emptySpaces[rand]] = 2;\n        }\n\n        this.setState({\n          history: history.concat([\n            {\n              tiles: tiles\n            }\n          ]),\n          stepNumber: history.length,\n        })\n      }\n    }\n  }\n\n  move_possible(tiles, numRows, numPerRow) {\n    let move_possible = false;\n    for (let i = 0; i < numRows; i++) {\n      const row_index = i*numRows;\n      for (let j = 0; j < numPerRow; j++) {\n        const curr_index = row_index + j;\n\n        //Checks if curr_index - numPerRow is still within bounds of our array.\n        //Sets it to -1 if its out of bounds so we can account for it later.\n        //Necessary since an empty space in our board is \"null\".\n        //Possibly could make our default \"empty\" value -1.\n        const above_curr = curr_index - numPerRow > 0 ? curr_index - numPerRow : null;\n        const below_curr = curr_index + numPerRow < tiles.length ? curr_index + numPerRow : null;\n        const left_curr = j - 1 > 0 ? curr_index - 1 : null;\n        const right_curr = j + 1 < numPerRow ? curr_index + 1 :null;\n\n        move_possible = move_possible || above_curr !== null || below_curr !== null || left_curr !== null || right_curr !== null;\n\n      }\n    }\n    console.log(move_possible);\n    return move_possible;\n  }\n\n  render() {\n    let score = this.state.score;\n    let best_score = this.state.best_score;\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n\n    document.onkeydown = this.handleKeyPress;\n\n    return(\n      <div className=\"game\" onKeyPress={this.handleKeyPress}>\n        <div className = \"game-header\">\n          <div className = \"header\">\n            <p className=\"title\">2048</p>\n            <p clasName=\"subtitle\">A take on 2048 in React.</p>\n          </div>\n          <div className = \"game-info\">\n            <div>\n              <p>Score</p>\n              <p><strong>{score}</strong></p>\n            </div>\n            <div>\n              <p>Best</p>\n              <p><strong>{best_score}</strong></p>\n            </div>\n            <div>\n              <p>Moves</p>\n              <p><strong>{this.state.stepNumber}</strong></p>\n            </div>\n          </div>\n        </div>\n        <Board\n          tiles={current.tiles}\n        />\n        <div className=\"controls\">\n          <button className=\"control\" onClick={() => this.shift(0)}><i class=\"fas fa-arrow-left\"></i></button>\n          <button className=\"control\" onClick={() => this.shift(1)}><i class=\"fas fa-arrow-up\"></i></button>\n          <button className=\"control\" onClick={() => this.shift(2)}><i class=\"fas fa-arrow-down\"></i></button>\n          <button className=\"control\" onClick={() => this.shift(3)}><i class=\"fas fa-arrow-right\"></i></button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}