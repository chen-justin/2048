{"version":3,"sources":["index.js"],"names":["Tile","props","tags","value","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","toString","Board","i","this","tiles","renderTile","React","Component","Game","_this","Object","_home_jc_Dropbox_Projects_2048_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_home_jc_Dropbox_Projects_2048_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_jc_Dropbox_Projects_2048_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","handleKeyPress","e","window","event","keyCode","shift","state","history","Array","fill","score","best_score","stepNumber","arr","length","rand","Math","floor","random","indexOf","hydrateStateWithLocalStorage","addEventListener","saveStateToLocalStorage","bind","removeEventListener","key","localStorage","hasOwnProperty","getItem","JSON","parse","setState","_home_jc_Dropbox_Projects_2048_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","setItem","stringify","new_tiles","rows","console","log","max","bit","move_possible","slice","current","moveMade","addedScore","prev","ptr","pivot","emptySpaces","push","concat","numRows","numPerRow","row_index","j","curr_index","above_curr","below_curr","_this2","document","onkeydown","id","onKeyPress","onClick","undo","reset_game","react_swipeable__WEBPACK_IMPORTED_MODULE_9___default","onSwipedLeft","onSwipedUp","onSwipedDown","onSwipedRight","preventDefaultTouchmoveEvent","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.dd873ca4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Swipeable from 'react-swipeable'\n\nfunction Tile(props) {\n  let tags = \"tile\";\n  if (props.value < 0) { //For our purposes, negative values will be the \"empty\" value.\n    return(\n      <div className=\"tile\">\n        {null}\n      </div>\n    );\n  }\n\n  tags = \"tile tile-\"+ props.value.toString();\n\n  return (\n    <div className={tags}>\n      {props.value}\n    </div>\n  );\n}\n\nclass Board extends React.Component {\n  renderTile(i) {\n    return (\n      <Tile\n        value={this.props.tiles[i]}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"game-board\">\n        <div className=\"board-row\">\n          {this.renderTile(0)}\n          {this.renderTile(1)}\n          {this.renderTile(2)}\n          {this.renderTile(3)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderTile(4)}\n          {this.renderTile(5)}\n          {this.renderTile(6)}\n          {this.renderTile(7)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderTile(8)}\n          {this.renderTile(9)}\n          {this.renderTile(10)}\n          {this.renderTile(11)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderTile(12)}\n          {this.renderTile(13)}\n          {this.renderTile(14)}\n          {this.renderTile(15)}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          tiles: Array(16).fill(-1),\n          score: 0\n        },\n      ],\n      best_score: 0,\n      stepNumber: 0,\n    }\n    let arr = []\n    let rows = 4;\n    let rowSize = 4;\n    //Initializes board with \"2\" in two random places.\n    while (arr.length < 2) {\n      const rand = Math.floor(Math.random()*rows*rowSize);\n      if(arr.indexOf(rand) > -1) continue;\n      arr[arr.length] = rand;\n    }\n\n    this.state.history[0].tiles[arr[0]] = 2;\n    this.state.history[0].tiles[arr[1]] = 2;\n  }\n\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n\n  reset_game() {\n    let arr = []\n    let rows = 4;\n    let rowSize = 4;\n    //Initializes board with \"2\" in two random places.\n    while (arr.length < 2) {\n      const rand = Math.floor(Math.random()*rows*rowSize);\n      if(arr.indexOf(rand) > -1) continue;\n      arr[arr.length] = rand;\n    }\n    let new_tiles = Array(rows*rowSize).fill(-1);\n    new_tiles[arr[0]] = 2;\n    new_tiles[arr[1]] = 2;\n    console.log(new_tiles);\n    this.setState({\n      best_score: Math.max(this.state.best_score, this.state.history[this.state.stepNumber].score),\n      history: [{tiles: new_tiles, score: 0}],\n      stepNumber: 0,\n    })\n  }\n\n  undo() {\n    this.setState({\n      stepNumber: Math.max(0, this.state.stepNumber - 1),\n    })\n  }\n\n  handleKeyPress = (e) => {\n    e = e || window.event;\n    if (e.keyCode === 38) {\n      // up arrow\n      this.shift(1);\n    }\n    else if (e.keyCode === 40) {\n      // down arrow\n      this.shift(2);\n    }\n    else if (e.keyCode === 37) {\n      // left arrow\n      this.shift(0);\n    }\n    else if (e.keyCode === 39) {\n      // right arrow\n      this.shift(3);\n    }\n  }\n\n  shift(bit) {\n    if (this.move_possible) {\n      // 0 = left, 1 = up, 2 = down, 3 = right\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const tiles = current.tiles.slice();\n      const rows = 4;\n      const rowSize = 4;\n      let moveMade = false;\n      let addedScore = 0;\n\n      if (bit === 0) {\n        //Shifting left\n        for (let i = 0; i < rows; i++) {\n          //Perform possible merges.\n          let prev = i*rowSize;\n          let ptr = prev + 1;\n          while (ptr < (i+1)*rowSize) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              addedScore += tiles[ptr];\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else if (tiles[ptr] > 0) {\n              prev = ptr;\n            }\n            ptr++;\n          }\n\n          //Moves everything as left as possible\n          let pivot = i*rowSize;\n          while (pivot < (i+1)*rowSize && tiles[pivot] > 0) {\n            pivot++;\n          }\n          ptr = pivot; //Reset ptr\n          while (ptr < (i+1)*rowSize) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot++;\n              moveMade = true;\n            }\n            ptr++;\n          }\n        }\n\n      } else if (bit === 1) {\n        //Shifting up\n        for (let i = 0; i < rowSize; i++) {\n\n          //Perform possible merges\n          let prev = i;\n          let ptr = prev + rowSize;\n          while (ptr < tiles.length) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              addedScore += tiles[ptr];\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else {\n              if (tiles[ptr] > 0) {\n                prev = ptr;\n              }\n            }\n            ptr += rowSize;\n          }\n\n          let pivot = i;\n          while (pivot < tiles.length && tiles[pivot] > 0) {\n            pivot += rowSize;\n          }\n          ptr = pivot;\n          while (ptr < tiles.length) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot += rowSize;\n              moveMade = true;\n            }\n            ptr += rowSize;\n          }\n        }\n      } else if (bit === 2) {\n        //Shifting down\n        for (let i = 0; i < rowSize; i++) {\n\n          //Perform possible merges\n          let prev = tiles.length - i - 1;\n          let ptr = prev - rowSize;\n          while (ptr >= 0) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              addedScore += tiles[ptr];\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else {\n              if (tiles[ptr] > 0) {\n                prev = ptr;\n              }\n            }\n            ptr -= rowSize;\n          }\n\n          let pivot = tiles.length - i - 1;\n          while (pivot >= 0 && tiles[pivot] > 0) {\n            pivot -= rowSize;\n          }\n          ptr = pivot;\n          while (ptr >= 0) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot -= rowSize;\n              moveMade = true;\n            }\n            ptr -= rowSize;\n          }\n        }\n      } else if (bit === 3) {\n        //Shifting right\n        for (let i = 0; i < rows; i++) {\n          //Perform possible merges.\n          let prev = (i+1)*rowSize-1;\n          let ptr = prev - 1;\n          while (ptr > i*rowSize-1) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              addedScore += tiles[ptr];\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else if (tiles[ptr] > 0) {\n              prev = ptr;\n            }\n            ptr--;\n          }\n\n          //Moves everything as right as possible\n          let pivot = (i+1)*rowSize-1;\n          while (pivot >= i*rowSize && tiles[pivot] > 0) {\n            pivot--;\n          }\n          ptr = pivot; //Reset ptr\n          while (ptr >= i*rowSize) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot--;\n              moveMade = true;\n            }\n            ptr--;\n          }\n        }\n      }\n\n      let emptySpaces = [];\n      for (let i = 0; i < tiles.length; i++) {\n        if (tiles[i] < 0) {\n          emptySpaces.push(i);\n        }\n      }\n      \n      if (moveMade) {\n        //Generate a new tile to add in an empty space.\n        if (emptySpaces) {\n          let rand = Math.floor(Math.random()*emptySpaces.length);\n          tiles[emptySpaces[rand]] = 2;\n        }\n\n        this.setState({\n          best_score: Math.max(this.state.history[this.state.stepNumber].score + addedScore, this.state.best_score),\n          history: history.concat([\n            {\n              tiles: tiles,\n              score: current.score + addedScore\n            }\n          ]),\n          stepNumber: history.length,\n        })\n      }\n    }\n  }\n\n  move_possible(tiles, numRows, numPerRow) {\n    let move_possible = false;\n    for (let i = 0; i < numRows; i++) {\n      const row_index = i*numRows;\n      for (let j = 0; j < numPerRow; j++) {\n        const curr_index = row_index + j;\n\n        //Checks if curr_index - numPerRow is still within bounds of our array.\n        //Sets it to -1 if its out of bounds so we can account for it later.\n        //Necessary since an empty space in our board is \"null\".\n        //Possibly could make our default \"empty\" value -1.\n        const above_curr = curr_index - numPerRow > 0 ? curr_index - numPerRow : null;\n        const below_curr = curr_index + numPerRow < tiles.length ? curr_index + numPerRow : null;\n        const left_curr = j - 1 > 0 ? curr_index - 1 : null;\n        const right_curr = j + 1 < numPerRow ? curr_index + 1 :null;\n\n        move_possible = move_possible || above_curr !== null || below_curr !== null || left_curr !== null || right_curr !== null;\n\n      }\n    }\n    return move_possible;\n  }\n\n  render() {\n    let best_score = this.state.best_score;\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    let score = current.score;\n\n    document.onkeydown = this.handleKeyPress;\n\n    return(\n      <div id=\"game\" className=\"game\" onKeyPress={this.handleKeyPress}>\n        <div className = \"header\">\n          <div className = \"game-header\">\n            <p className=\"title\">2048</p>\n            <div className = \"game-info\">\n              <div>\n                <p>Score</p>\n                <p><strong>{score}</strong></p>\n              </div>\n              <div>\n                <p>Best</p>\n                <p><strong>{best_score}</strong></p>\n              </div>\n              <div>\n                <p>Moves</p>\n                <p><strong>{this.state.stepNumber}</strong></p>\n              </div>\n            </div>\n          </div>\n          <div className=\"aux-header\">\n            <p className=\"subtitle\">A take on 2048 in React.</p>\n            <button className=\"resetGame\" onClick={() => this.undo()}>Undo</button>\n            <button className=\"resetGame\" onClick={() => this.reset_game()}>Reset</button>\n          </div>\n        </div>\n        <Swipeable\n          className=\"swipe\"\n          onSwipedLeft={() => this.shift(0)}\n          onSwipedUp={() => this.shift(1)}\n          onSwipedDown={() => this.shift(2)}\n          onSwipedRight={() => this.shift(3)}\n          preventDefaultTouchmoveEvent={true}\n        >\n          <Board\n            tiles={current.tiles}\n          />\n        </Swipeable>\n        <div className=\"controls\">\n          <button className=\"control\" onClick={() => this.shift(0)}><i className=\"fas fa-arrow-left\"></i></button>\n          <button className=\"control\" onClick={() => this.shift(1)}><i className=\"fas fa-arrow-up\"></i></button>\n          <button className=\"control\" onClick={() => this.shift(2)}><i className=\"fas fa-arrow-down\"></i></button>\n          <button className=\"control\" onClick={() => this.shift(3)}><i className=\"fas fa-arrow-right\"></i></button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}