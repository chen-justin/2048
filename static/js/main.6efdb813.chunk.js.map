{"version":3,"sources":["index.js"],"names":["Tile","props","tags","value","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","toString","Board","i","this","tiles","renderTile","React","Component","Game","_this","Object","_home_jc_Dropbox_Projects_2048_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_jc_Dropbox_Projects_2048_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_jc_Dropbox_Projects_2048_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleKeyPress","e","window","event","keyCode","shift","state","history","Array","fill","score","best_score","stepNumber","arr","length","rand","Math","floor","random","indexOf","new_tiles","rows","console","log","setState","max","bit","move_possible","slice","current","moveMade","addedScore","prev","ptr","pivot","emptySpaces","push","concat","numRows","numPerRow","row_index","j","curr_index","above_curr","below_curr","_this2","document","onkeydown","onKeyPress","class","onClick","undo","reset_game","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6efdb813.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nfunction Tile(props) {\n  let tags = \"tile\";\n  if (props.value < 0) { //For our purposes, negative values will be the \"empty\" value.\n    return(\n      <div className=\"tile\">\n        {null}\n      </div>\n    );\n  }\n\n  tags = \"tile tile-\"+ props.value.toString();\n\n  return (\n    <div className={tags}>\n      {props.value}\n    </div>\n  );\n}\n\nclass Board extends React.Component {\n  renderTile(i) {\n    return (\n      <Tile\n        value={this.props.tiles[i]}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"game-board\">\n        <div className=\"board-row\">\n          {this.renderTile(0)}\n          {this.renderTile(1)}\n          {this.renderTile(2)}\n          {this.renderTile(3)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderTile(4)}\n          {this.renderTile(5)}\n          {this.renderTile(6)}\n          {this.renderTile(7)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderTile(8)}\n          {this.renderTile(9)}\n          {this.renderTile(10)}\n          {this.renderTile(11)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderTile(12)}\n          {this.renderTile(13)}\n          {this.renderTile(14)}\n          {this.renderTile(15)}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          tiles: Array(16).fill(-1),\n          score: 0\n        },\n      ],\n      best_score: 0,\n      stepNumber: 0,\n    }\n    let arr = []\n    let rows = 4;\n    let rowSize = 4;\n    //Initializes board with \"2\" in two random places.\n    while (arr.length < 2) {\n      const rand = Math.floor(Math.random()*rows*rowSize);\n      if(arr.indexOf(rand) > -1) continue;\n      arr[arr.length] = rand;\n    }\n\n    this.state.history[0].tiles[arr[0]] = 2;\n    this.state.history[0].tiles[arr[1]] = 2;\n  }\n\n  reset_game() {\n    let arr = []\n    let rows = 4;\n    let rowSize = 4;\n    //Initializes board with \"2\" in two random places.\n    while (arr.length < 2) {\n      const rand = Math.floor(Math.random()*rows*rowSize);\n      if(arr.indexOf(rand) > -1) continue;\n      arr[arr.length] = rand;\n    }\n    let new_tiles = Array(rows*rowSize).fill(-1);\n    new_tiles[arr[0]] = 2;\n    new_tiles[arr[1]] = 2;\n    console.log(new_tiles);\n    this.setState({\n      best_score: Math.max(this.state.best_score, this.state.history[this.state.stepNumber].score),\n      history: [{tiles: new_tiles, score: 0}],\n      stepNumber: 0,\n    })\n  }\n\n  undo() {\n    this.setState({\n      stepNumber: Math.max(0, this.state.stepNumber - 1),\n    })\n  }\n\n  handleKeyPress = (e) => {\n    e = e || window.event;\n    if (e.keyCode === 38) {\n      // up arrow\n      this.shift(1);\n    }\n    else if (e.keyCode === 40) {\n      // down arrow\n      this.shift(2);\n    }\n    else if (e.keyCode === 37) {\n      // left arrow\n      this.shift(0);\n    }\n    else if (e.keyCode === 39) {\n      // right arrow\n      this.shift(3);\n    }\n  }\n\n  shift(bit) {\n    if (this.move_possible) {\n      // 0 = left, 1 = up, 2 = down, 3 = right\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const tiles = current.tiles.slice();\n      const rows = 4;\n      const rowSize = 4;\n      let moveMade = false;\n      let addedScore = 0;\n\n      if (bit === 0) {\n        //Shifting left\n        for (let i = 0; i < rows; i++) {\n          //Perform possible merges.\n          let prev = i*rowSize;\n          let ptr = prev + 1;\n          while (ptr < (i+1)*rowSize) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              addedScore += tiles[ptr];\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else if (tiles[ptr] > 0) {\n              prev = ptr;\n            }\n            ptr++;\n          }\n\n          //Moves everything as left as possible\n          let pivot = i*rowSize;\n          while (pivot < (i+1)*rowSize && tiles[pivot] > 0) {\n            pivot++;\n          }\n          ptr = pivot; //Reset ptr\n          while (ptr < (i+1)*rowSize) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot++;\n              moveMade = true;\n            }\n            ptr++;\n          }\n        }\n\n      } else if (bit === 1) {\n        //Shifting up\n        for (let i = 0; i < rowSize; i++) {\n\n          //Perform possible merges\n          let prev = i;\n          let ptr = prev + rowSize;\n          while (ptr < tiles.length) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              addedScore += tiles[ptr];\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else {\n              if (tiles[ptr] > 0) {\n                prev = ptr;\n              }\n            }\n            ptr += rowSize;\n          }\n\n          let pivot = i;\n          while (pivot < tiles.length && tiles[pivot] > 0) {\n            pivot += rowSize;\n          }\n          ptr = pivot;\n          while (ptr < tiles.length) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot += rowSize;\n              moveMade = true;\n            }\n            ptr += rowSize;\n          }\n        }\n      } else if (bit === 2) {\n        //Shifting down\n        for (let i = 0; i < rowSize; i++) {\n\n          //Perform possible merges\n          let prev = tiles.length - i - 1;\n          let ptr = prev - rowSize;\n          while (ptr >= 0) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              addedScore += tiles[ptr];\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else {\n              if (tiles[ptr] > 0) {\n                prev = ptr;\n              }\n            }\n            ptr -= rowSize;\n          }\n\n          let pivot = tiles.length - i - 1;\n          while (pivot >= 0 && tiles[pivot] > 0) {\n            pivot -= rowSize;\n          }\n          ptr = pivot;\n          while (ptr >= 0) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot -= rowSize;\n              moveMade = true;\n            }\n            ptr -= rowSize;\n          }\n        }\n      } else if (bit === 3) {\n        //Shifting right\n        for (let i = 0; i < rows; i++) {\n          //Perform possible merges.\n          let prev = (i+1)*rowSize-1;\n          let ptr = prev - 1;\n          while (ptr > i*rowSize-1) {\n            if(tiles[ptr] > 0 && tiles[ptr] === tiles[prev]) {\n              addedScore += tiles[ptr];\n              tiles[prev] = tiles[prev]*2;\n              tiles[ptr] = -1;\n              prev = ptr;\n              moveMade = true;\n            } else if (tiles[ptr] > 0) {\n              prev = ptr;\n            }\n            ptr--;\n          }\n\n          //Moves everything as right as possible\n          let pivot = (i+1)*rowSize-1;\n          while (pivot >= i*rowSize && tiles[pivot] > 0) {\n            pivot--;\n          }\n          ptr = pivot; //Reset ptr\n          while (ptr >= i*rowSize) {\n            if (tiles[ptr] > 0) {\n              tiles[pivot] = tiles[ptr];\n              tiles[ptr] = -1;\n              pivot--;\n              moveMade = true;\n            }\n            ptr--;\n          }\n        }\n      }\n\n      let emptySpaces = [];\n      for (let i = 0; i < tiles.length; i++) {\n        if (tiles[i] < 0) {\n          emptySpaces.push(i);\n        }\n      }\n\n      if (!moveMade && emptySpaces.length === 0) {\n        this.setState({\n          best_score: Math.max(this.state.history[this.state.stepNumber].score, this.state.best_score),\n        })\n      }\n\n      if (moveMade) {\n        //Generate a new tile to add in an empty space.\n        if (emptySpaces) {\n          let rand = Math.floor(Math.random()*emptySpaces.length);\n          tiles[emptySpaces[rand]] = 2;\n        }\n\n        this.setState({\n          history: history.concat([\n            {\n              tiles: tiles,\n              score: current.score + addedScore\n            }\n          ]),\n          stepNumber: history.length,\n        })\n      }\n    }\n  }\n\n  move_possible(tiles, numRows, numPerRow) {\n    let move_possible = false;\n    for (let i = 0; i < numRows; i++) {\n      const row_index = i*numRows;\n      for (let j = 0; j < numPerRow; j++) {\n        const curr_index = row_index + j;\n\n        //Checks if curr_index - numPerRow is still within bounds of our array.\n        //Sets it to -1 if its out of bounds so we can account for it later.\n        //Necessary since an empty space in our board is \"null\".\n        //Possibly could make our default \"empty\" value -1.\n        const above_curr = curr_index - numPerRow > 0 ? curr_index - numPerRow : null;\n        const below_curr = curr_index + numPerRow < tiles.length ? curr_index + numPerRow : null;\n        const left_curr = j - 1 > 0 ? curr_index - 1 : null;\n        const right_curr = j + 1 < numPerRow ? curr_index + 1 :null;\n\n        move_possible = move_possible || above_curr !== null || below_curr !== null || left_curr !== null || right_curr !== null;\n\n      }\n    }\n    console.log(move_possible);\n    return move_possible;\n  }\n\n  render() {\n    let best_score = this.state.best_score;\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    let score = current.score;\n\n    document.onkeydown = this.handleKeyPress;\n\n    return(\n      <div className=\"game\" onKeyPress={this.handleKeyPress}>\n        <div className = \"header\">\n          <div className = \"game-header\">\n            <p className=\"title\">2048</p>\n            <div className = \"game-info\">\n              <div>\n                <p>Score</p>\n                <p><strong>{score}</strong></p>\n              </div>\n              <div>\n                <p>Best</p>\n                <p><strong>{best_score}</strong></p>\n              </div>\n              <div>\n                <p>Moves</p>\n                <p><strong>{this.state.stepNumber}</strong></p>\n              </div>\n            </div>\n          </div>\n          <div class=\"aux-header\">\n            <p className=\"subtitle\">A take on 2048 in React.</p>\n            <button className=\"resetGame\" onClick={() => this.undo()}>Undo</button>\n            <button className=\"resetGame\" onClick={() => this.reset_game()}>Reset</button>\n          </div>\n        </div>\n        <Board\n          tiles={current.tiles}\n        />\n        <div className=\"controls\">\n          <button className=\"control\" onClick={() => this.shift(0)}><i className=\"fas fa-arrow-left\"></i></button>\n          <button className=\"control\" onClick={() => this.shift(1)}><i className=\"fas fa-arrow-up\"></i></button>\n          <button className=\"control\" onClick={() => this.shift(2)}><i className=\"fas fa-arrow-down\"></i></button>\n          <button className=\"control\" onClick={() => this.shift(3)}><i className=\"fas fa-arrow-right\"></i></button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}